/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StudentSocietyDAO {
  export type ProposalStruct = {
    index: PromiseOrValue<BigNumberish>;
    proposer: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    voteup: PromiseOrValue<BigNumberish>;
    votedown: PromiseOrValue<BigNumberish>;
    due: PromiseOrValue<boolean>;
  };

  export type ProposalStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean
  ] & {
    index: number;
    proposer: string;
    startTime: BigNumber;
    duration: BigNumber;
    voteup: number;
    votedown: number;
    due: boolean;
  };
}

export interface StudentSocietyDAOInterface extends utils.Interface {
  functions: {
    "getData()": FunctionFragment;
    "myERC20()": FunctionFragment;
    "newProposal()": FunctionFragment;
    "num()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "vote(uint256,uint256)": FunctionFragment;
    "voteEnd(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getData"
      | "myERC20"
      | "newProposal"
      | "num"
      | "proposals"
      | "vote"
      | "voteEnd"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(functionFragment: "myERC20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newProposal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "num", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteEnd",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "num", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteEnd", data: BytesLike): Result;

  events: {};
}

export interface StudentSocietyDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StudentSocietyDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getData(
      overrides?: CallOverrides
    ): Promise<[StudentSocietyDAO.ProposalStructOutput[]]>;

    myERC20(overrides?: CallOverrides): Promise<[string]>;

    newProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    num(overrides?: CallOverrides): Promise<[number]>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, number, number, boolean] & {
        index: number;
        proposer: string;
        startTime: BigNumber;
        duration: BigNumber;
        voteup: number;
        votedown: number;
        due: boolean;
      }
    >;

    vote(
      ind: PromiseOrValue<BigNumberish>,
      atti: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteEnd(
      ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getData(
    overrides?: CallOverrides
  ): Promise<StudentSocietyDAO.ProposalStructOutput[]>;

  myERC20(overrides?: CallOverrides): Promise<string>;

  newProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  num(overrides?: CallOverrides): Promise<number>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, number, number, boolean] & {
      index: number;
      proposer: string;
      startTime: BigNumber;
      duration: BigNumber;
      voteup: number;
      votedown: number;
      due: boolean;
    }
  >;

  vote(
    ind: PromiseOrValue<BigNumberish>,
    atti: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteEnd(
    ind: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getData(
      overrides?: CallOverrides
    ): Promise<StudentSocietyDAO.ProposalStructOutput[]>;

    myERC20(overrides?: CallOverrides): Promise<string>;

    newProposal(overrides?: CallOverrides): Promise<void>;

    num(overrides?: CallOverrides): Promise<number>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, number, number, boolean] & {
        index: number;
        proposer: string;
        startTime: BigNumber;
        duration: BigNumber;
        voteup: number;
        votedown: number;
        due: boolean;
      }
    >;

    vote(
      ind: PromiseOrValue<BigNumberish>,
      atti: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteEnd(
      ind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getData(overrides?: CallOverrides): Promise<BigNumber>;

    myERC20(overrides?: CallOverrides): Promise<BigNumber>;

    newProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    num(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      ind: PromiseOrValue<BigNumberish>,
      atti: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteEnd(
      ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    num(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      ind: PromiseOrValue<BigNumberish>,
      atti: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteEnd(
      ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
